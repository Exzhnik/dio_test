# Generated with protoc-gen-openapi
# https://github.com/googleapis/gnostic/tree/master/apps/protoc-gen-openapi

openapi: 3.0.3
info:
    title: ProjectService
    version: 0.0.1
paths:
    /stores/v1/projects:
        get:
            operationId: ProjectService_List
            parameters:
                - name: project_id
                  in: query
                  schema:
                    type: string
                - name: page_size
                  in: query
                  schema:
                    type: string
                - name: page_token
                  in: query
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListProjectsResponse'
        post:
            operationId: ProjectService_Create
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateProjectRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Project'
    /stores/v1/projects/{project_id}:
        get:
            operationId: ProjectService_Get
            parameters:
                - name: project_id
                  in: query
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Project'
        delete:
            operationId: ProjectService_Delete
            parameters:
                - name: project_id
                  in: query
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Operation'
        patch:
            operationId: ProjectService_Update
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateProjectRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Operation'
    /stores/v1/projects/{project_id}/channels:
        get:
            operationId: ChannelService_List
            parameters:
                - name: channel_id
                  in: query
                  schema:
                    type: string
                - name: project_id
                  in: query
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListChannelsResponse'
        post:
            operationId: ChannelService_Create
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateChannelRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Channel'
    /stores/v1/projects/{project_id}/channels/{channel_id}:
        get:
            operationId: ChannelService_Get
            parameters:
                - name: channel_id
                  in: query
                  description: GetChannelRequest 1
                  schema:
                    type: string
                - name: project_id
                  in: query
                  description: GetChannelRequest
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Channel'
        delete:
            operationId: ChannelService_Delete
            parameters:
                - name: channel_id
                  in: query
                  schema:
                    type: string
                - name: project_id
                  in: query
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Operation'
        patch:
            operationId: ChannelService_Update
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateChannelRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Operation'
components:
    schemas:
        Any:
            properties:
                type_url:
                    type: string
                    description: 'A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one "/" character. The last segment of the URL''s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading "." is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.'
                value:
                    type: string
                    description: Must be a valid serialized protocol buffer of the above specified type.
                    format: bytes
            description: '`Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message. Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type. Example 1: Pack and unpack a message in C++.     Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     } Example 2: Pack and unpack a message in Java.     Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }  Example 3: Pack and unpack a message in Python.     foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...  Example 4: Pack and unpack a message in Go      foo := &pb.Foo{...}      any, err := anypb.New(foo)      if err != nil {        ...      }      ...      foo := &pb.Foo{}      if err := any.UnmarshalTo(foo); err != nil {        ...      } The pack methods provided by protobuf library will by default use ''type.googleapis.com/full.type.name'' as the type URL and the unpack methods only use the fully qualified type name after the last ''/'' in the type URL, for example "foo.bar.com/x/y.z" will yield type name "y.z". JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:     package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }     {       "@type": "type.googleapis.com/google.profile.Person",       "firstName": <string>,       "lastName": <string>     } If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):     {       "@type": "type.googleapis.com/google.protobuf.Duration",       "value": "1.212s"     }'
        Channel:
            properties:
                id:
                    type: string
                    description: ID of the channel.
                project_id:
                    type: string
                    description: ID of the project to which the channel is related
                created_at:
                    type: string
                    description: Timestamp on which the channel was first created.
                    format: RFC3339
                name:
                    type: string
                    description: Name of the channel as it will appear to merchants in the control panel.
                description:
                    type: string
                    description: Description of channel. 0-256 characters long.
                type:
                    type: integer
                    description: The type of channel
                    format: enum
                status:
                    type: integer
                    description: 'The state of the channel. For example: ACTIVE or INACTIVE.'
                    format: enum
                external_id:
                    type: string
                    description: Associated ID within a system / platform outside.
            description: Channel entry resource specification. A channel is anywhere a merchant sells their products. This encompasses headless storefronts, marketplaces, POS systems, and marketing platforms.
        CreateChannelRequest:
            properties:
                channel_id:
                    type: string
                project_id:
                    type: string
        CreateProjectRequest:
            properties: {}
        ListChannelsResponse:
            properties: {}
        ListProjectsResponse:
            properties:
                projects:
                    type: array
                    items:
                        $ref: '#/components/schemas/Project'
                next_page_token:
                    type: string
        Operation:
            properties:
                id:
                    type: string
                    description: ID of the operation.
                description:
                    type: string
                    description: Description of the operation. 0-256 characters long.
                created_at:
                    type: string
                    description: Creation timestamp.
                    format: RFC3339
                created_by:
                    type: string
                    description: ID of the user or service account who initiated the operation.
                modified_at:
                    type: string
                    description: The time when the Operation resource was last modified.
                    format: RFC3339
                done:
                    type: boolean
                    description: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
                metadata:
                    $ref: '#/components/schemas/Any'
                error:
                    $ref: '#/components/schemas/Status'
                response:
                    $ref: '#/components/schemas/Any'
        Project:
            properties:
                id:
                    type: string
                    description: ID of the project.
                created_at:
                    type: string
                    description: Timestamp on which the project was first created.
                    format: RFC3339
                name:
                    type: string
                    description: Name of the project.
                description:
                    type: string
                    description: Description of the project. 0-256 characters long.
                status:
                    type: integer
                    description: 'The state of the channel. For example: CREATING or DELETING.'
                    format: enum
            description: Project entry resource specification.
        Status:
            properties:
                code:
                    type: integer
                    description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
                    format: int32
                message:
                    type: string
                    description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
                details:
                    type: array
                    items:
                        $ref: '#/components/schemas/Any'
                    description: A list of messages that carry the error details.  There is a common set of message types for APIs to use.
            description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
        UpdateChannelRequest:
            properties:
                channel_id:
                    type: string
                project_id:
                    type: string
        UpdateProjectRequest:
            properties:
                project_id:
                    type: string
